*Issues Identified
1. SKU Uniqueness Not Enforced:
No check for whether a product with the same SKU already exists.
Duplicate SKUs allowed, violating business rule.

2. Products Across Multiple Warehouses:
The current logic implies a 1:1 relation between product and warehouse.
Doesn't support products in multiple warehouses.

3. Missing Input Validation:
No checks for required or optional fields.
Causes KeyError if fields are missing.

4. Incorrect Decimal Usage for Price:
Depending on the ORM, storing price as float may cause rounding errors(e.g., 19.999999).

5. Inventory Tied to Product Creation:
Should inventory creation be optional or done separately?

6. No Error Handling:
Any failure crashes the endpoint with no meaningful error message.


  
*Correction
1. Check for existing product with same SKU and return 409 Conflict if found.

2. Removed warehouse_id from Product model creation. It belongs in Inventory.

3. Added validation for required fields; returns error message with 400.

4. Cast to Decimal for accurate monetary representation.

5. Create inventory record

6. Could be improved with default handling.



Corrected Code :-
@app.route('/api/products', methods=['POST'])
def create_product():
    data = request.get_json()

    # Input validation
    required_fields = ['name', 'sku', 'price', 'warehouse_id', 'initial_quantity']
    for field in required_fields:
        if field not in data:
            return {"error": f"Missing field: {field}"}, 400

    # Check SKU uniqueness
    existing = Product.query.filter_by(sku=data['sku']).first()
    if existing:
        return {"error": "SKU must be unique"}, 409

    try:
        # Create product
        product = Product(
            name=data['name'],
            sku=data['sku'],
            price=Decimal(data['price'])  # Ensure precision
        )
        db.session.add(product)
        db.session.flush()  # Gets product.id before commit

        # Inventory setup
        inventory = Inventory(
            product_id=product.id,
            warehouse_id=data['warehouse_id'],
            quantity=data['initial_quantity']
        )
        db.session.add(inventory)
        db.session.commit()

        return {"message": "Product created", "product_id": product.id}, 201

    except Exception as e:
        db.session.rollback()
        return {"error": str(e)}, 500
